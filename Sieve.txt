#include <bits/stdc++.h>

// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>

using namespace std;

// using namespace std;
// using namespace __gnu_pbds;

#define int long long int
// #define ll long long
#define endl "\n"
#define pb push_back
#define poop pop_back
#define vil vector<long long int>
#define vii vector<int>
#define vip vector<pair<int,int>>
#define p_count __builtin_popcount
#define all(x) x.begin(),x.end()
#define L lower_bound
#define U upper_bound
#define F first
#define S second
#define mx_e(v) *max_element(all(v))
#define mn_e(v) *min_element(all(v))
#define rep(i,n) for(int i=0;i<n;i++)
#define w(t) cin>>t; while(t--)
#define min3(a,b,c) min(a,min(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define inf 1e18
#define u_map unordered_map<int,int>


//--------------------------Code----------------------------------------------------------------------------------------//


const int N = 3e5;

// int arr[N];

vector<int>  primes;
void SieveOfEratosthenes() {
    bool prime[N];
    memset(prime, true, sizeof(prime));

    for (int p = 2; p * p < N ; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i < N ; i += p)
                prime[i] = false;
        }
    }

    for (int p = 2; p < N ; p++)
        if (prime[p])
            primes.pb(p);
}

void solve() {

    SieveOfEratosthenes();
    int n;
    cin>>n;
    int i =0;
    while(primes[i]<=n){
     if(primes[i]==n){
         cout<<"YES"<<endl;
         return ;
     }
     i++;
    }
    cout<<"NO"<<endl;

}

int32_t main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
        // cout<<t<<endl;
        solve();
    }
}