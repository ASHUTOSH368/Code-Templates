#include <bits/stdc++.h>

// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>

using namespace std;

// using namespace std;
// using namespace __gnu_pbds;

#define int long long int
// #define ll long long
#define endl "\n"
#define pb push_back
#define poop pop_back
#define vil vector<long long int>
#define vii vector<int>
#define vip vector<pair<int,int>>
#define p_count __builtin_popcount
#define all(x) x.begin(),x.end()
#define L lower_bound
#define U upper_bound
#define F first
#define S second
#define mx_e(v) *max_element(all(v))
#define mn_e(v) *min_element(all(v))
#define rep(i,n) for(int i=0;i<n;i++)
#define w(t) cin>>t; while(t--)
#define min3(a,b,c) min(a,min(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define inf 1e18
#define u_map unordered_map<int,int>


//--------------------------Code----------------------------------------------------------------------------------------//

class ST {
	vector<int> seg,lazy;
public:
	ST(int n){
		seg.resize(4*n+1);
		lazy.resize(4*n+1);
	}

public:
	void build(int indx,int low,int high,int arr[]){
		if(low==high){
			seg[indx]=arr[low];
			return ;
		}
		int mid=(low+high)>>1;
		build(2*indx+1,low,mid,arr);
		build(2*indx+2,mid+1,high,arr);
		seg[indx]=seg[2*indx+1] + seg[2*indx+2];
	}

public:
	void update(int indx,int low,int high,int l,int r,int val){
		//pending update
		if(lazy[indx]){
			seg[indx]+= (high-low+1)* lazy[indx];

			if(low!=high){
				lazy[2*indx+1] += lazy[indx];
				lazy[2*indx+2] += lazy[indx];
			}
			lazy[indx]=0;
		}
		//no overlap
		if(low>r or high<l){
			return ;
		}
		
		//fully overlap
		if(low>=l && high<=r){
			seg[indx]+=(high-low+1)*val;
			if(low!=high){
				lazy[2*indx+1] +=val;
				lazy[2*indx+2] +=val;
			}
			return ;
		}
		int mid=(low+high)>>1;
		update(2*indx+1,low,mid,l,r,val);
		update(2*indx+2,mid+1,high,l,r,val);
		seg[indx] = seg[2*indx+1] + seg[2*indx+2];
	}

public:
	int query(int indx,int low,int high,int l,int r){
		//update pending
		if(lazy[indx]){
			seg[indx]+= (high-low+1)* lazy[indx];

			if(low!=high){
				lazy[2*indx+1] += lazy[indx];
				lazy[2*indx+2] += lazy[indx];
			}
			lazy[indx]=0;
		}
		if(high<l or low>r){
			return 0;
		}

		if(low>=l && high<=r){
			return seg[indx];
		}

		int mid=(low+high)>>1;
		int left= query(2*indx+1,low,mid,l,r);
		int right = query(2*indx+2,mid+1,high,l,r);
		return left+right;
	}
};

void solve(){
    int n,q;
    cin>>n>>q;
    int arr[n];
    for(int i=0;i<n;i++){
    	cin>>arr[i];
    }
    ST st(n);
    st.build(0,0,n,arr);

    while(q--){
        int type;
        cin>>type;
        if(type==2){
            int l;
            cin>>l;
            // cout<<l<<' ';
            cout<<st.query(0,0,n,l-1,l-1)<<endl;
        }
        else{
            int l,r, val;
            cin>>l>>r>>val;
            // cout<<l<<' '<<r<<' '
            // l--;
            // r--;
            st.update(0,0,n,l-1,r-1,val);
        }
    }
}

int32_t main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
    	// cout<<t<<endl;
        solve();
    }
}